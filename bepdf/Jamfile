## OpenBeOS Generic Jamfile v1.0 ##

## Fill in this file to specify the project being created, and the referenced
## Jamfile-engine will do all of the hard work for you.  This handles both
## Intel and PowerPC builds of the (Open)BeOS.

## Application Specific Settings ---------------------------------------------

# Specify the name of the binary
#	If the name has spaces, you must quote it: "My App"
NAME = BePDF ;

# Specify the type of binary
#	APP:	Application
#	SHARED:	Shared library or add-on
#	STATIC:	Static library archive
#	DRIVER: Kernel Driver
TYPE = APP ;

# Specify the source files to use
#	Full paths or paths relative to the Jamfile can be included.
# 	All files, regardless of directory, will have their object
#	files created in the common object directory.
#	Note that this means this Jamfile will not work correctly
#	if two source files with the same name (source.c or source.cpp)
#	are included from different directories.
# Ex: SRCS = file1.cpp file2.cpp file3.cpp ;
SRCS = 
beos/AnnotAppearance.cpp
beos/AnnotWriter.cpp
beos/Annotation.cpp
beos/AnnotationRenderer.cpp
beos/AnnotationWindow.cpp
beos/AttachmentView.cpp
beos/Attachments.cpp
beos/BeFontEncoding.cpp
beos/BeLoadProgressMonitor.cpp
beos/BePDF.cpp
beos/BepdfApplication.cpp
beos/BitmapPool.cpp
beos/CachedPage.cpp
beos/DisplayCIDFonts.cpp
beos/EntryChangedMonitor.cpp
beos/FileInfoWindow.cpp
beos/FileSpec.cpp
beos/FindTextWindow.cpp
beos/History.cpp
beos/InputEnabler.cpp
beos/LayoutUtils.cpp
beos/OutlinesWindow.cpp
beos/PDFPrint.cpp
beos/PDFSearch.cpp
beos/PDFView.cpp
beos/PDFWindow.cpp
beos/PageCache.cpp
beos/PageLabels.cpp
beos/PageRenderer.cpp
beos/PasswordWindow.cpp
beos/PreferencesWindow.cpp
beos/PrintSettingsWindow.cpp
beos/PrintingProgressWindow.cpp
beos/SaveThread.cpp
beos/Settings.cpp
beos/SplitView.cpp
beos/StatusWindow.cpp
beos/TextConversion.cpp
beos/TraceWindow.cpp
beos/TreeParser.cpp
beos/htk/HWindow.cpp
beos/locale/Catalog.cpp
beos/utils/BitmapButton.cpp
beos/utils/EntryMenuItem.cpp
beos/utils/LayerView.cpp
beos/utils/MultiButton.cpp
beos/utils/ResourceLoader.cpp
beos/utils/StatusBar.cpp
beos/utils/StringLocalization.cpp
# beos/utils/Test.cpp
beos/utils/Thread.cpp
beos/utils/ToolBar.cpp
beos/utils/ToolTip.cpp
beos/utils/ToolTipItem.cpp 
;

# Specify the resource files to use
#	Full path or a relative path to the resource file can be used.
if ( $(BUILD_PLATFORM) = BeOS )
{
	RSRCS = beos/BePDF.rsrc ;
}
else if ( $(BUILD_PLATFORM) = Haiku )
{
	RDEFS = beos/BePDF.rdef ;
}

# Specify additional libraries to link against
#	There are two acceptable forms of library specifications
#	-	if your library follows the naming pattern of:
#		libXXX.so or libXXX.a you can simply specify XXX
#		library: libbe.so entry: be
#		
#	- 	if your library does not follow the standard library
#		naming scheme you need to specify the path to the library
#		and it's name
#		library: my_lib.a entry: my_lib.a or path/my_lib.a
LIBS = 
# BeOS
be
stdc++.r4
textencoding
tracker
translation
# additional libraries
../xpdf/obj.X86/libxpdf.a 
../freetype2/objs/libfreetype.a 
../layout/lib/liblayout.so 
../santa/obj.X86/libsanta.a 
;

# Specify additional paths to directories following the standard
#	libXXX.so or libXXX.a naming scheme.  You can specify full paths
#	or paths relative to the Jamfile.  The paths included may not
#	be recursive, so include all of the paths where libraries can
#	be found.  Directories where source files are found are
#	automatically included.
LIBPATHS = 
;

# Additional paths to look for system headers
#	These use the form: #include <header>
#	source file directories are NOT auto-included here
SYSTEM_INCLUDE_PATHS =  

../layout/headers

../santa
../santa/BetterScrollView
../santa/ColumnListView
../santa/Cursors
../santa/NewStrings
../santa/PrefilledBitmap
../santa/ScrollViewCorner 

../xpdf
../xpdf/beos
../xpdf/fofi
../xpdf/goo
../xpdf/splash
../xpdf/xpdf
;

if ( $(BUILD_PLATFORM) = BeOS )
{
	SYSTEM_INCLUDE_PATHS += 
		../xpdf/beos/compat
	; 
}

# Additional paths to look for local headers
#	thes use the form: #include "header"
#	source file directories are automatically included
LOCAL_INCLUDE_PATHS =  
beos/htk
beos/locale
beos/utils
;

# Specify the level of optimization that you desire
#	NONE, SOME, FULL
OPTIMIZE = FULL ;

# Specify any preprocessor symbols to be defined.  The symbols will not
#	have their values set automatically; you must supply the value (if any)
#	to use.  For example, setting DEFINES to "DEBUG=1" will cause the
#	compiler option "-DDEBUG=1" to be used.  Setting DEFINES to "DEBUG"
#	would pass "-DDEBUG" on the compiler's command line.
DEFINES =  ;

# Specify special warning levels
#	if unspecified default warnings will be used
#	NONE = supress all warnings
#	ALL = enable all warnings
WARNINGS =  ;

# Specify whether image symbols will be created
#	so that stack crawls in the debugger are meaningful
#	if TRUE symbols will be created
SYMBOLS =  ;

# Specify debug settings
#	if TRUE will allow application to be run from a source-level
#	debugger.  Note that this will disable all optimzation.
# DEBUGGER = ;

# Specify additional compiler flags for all files
COMPILER_FLAGS = -Wno-write-strings ;

# Specify additional linker flags
LINKER_FLAGS =  ;

# (for TYPE == DRIVER only) Specify desired location of driver in the /dev
#	hierarchy. Used by the driverinstall rule. E.g., DRIVER_PATH = video/usb will
#	instruct the driverinstall rule to place a symlink to your driver's binary in
#	~/add-ons/kernel/drivers/dev/video/usb, so that your driver will appear at
#	/dev/video/usb when loaded. Default is "misc".
DRIVER_PATH =  ;

## Include the Jamfile-engine
include ../etc/Jamfile-engine ;
